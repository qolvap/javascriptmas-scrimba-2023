<!-- e-card for christmas using ai -->


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Christmas E-card</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Courgette&family=Roboto:wght@400&display=swap" rel="stylesheet">
    <style>
        :root {
            --radius: 3px;
            --main-color: #5D3FD3;
        }

        html, body {
            margin: 0;
            padding: 0;
        }

        body {
            background-image: url('/xmas-bg.png');
            background-repeat: no-repeat;
            background-size: cover;
            height: 100vh;   
            background-color: blue;   
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--main-color);
        }

        main {
            display: flex;
            box-shadow: 3px 3px 10px 1px #666;
            border-radius: var(--radius);
            position: relative;
        }

        section {
            width: 256px;
            height: 256px;
            text-align: center;
            background-color: white;
            padding: 1em;
        }

        .right-col {
            border-top-right-radius: var(--radius);
            border-bottom-right-radius: var(--radius);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            font-family: 'Courgette';
        }

        .left-col {
            border-top-left-radius: var(--radius);
            border-bottom-left-radius: var(--radius);
        }

        img {
            border-radius: var(--radius);
            width: 256px;
        }

        dialog {
            border: none;
            border-radius: var(--radius);
            box-shadow: 3px 3px 10px 1px #666;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            padding: 2em;
            width: 300px;
        }

        .form-inner {
            display: flex;
        }

        label {
            font-family: 'Roboto'; 
            display: block;
            text-align: center;
            margin: 0 auto 1em auto;
            padding: 0 .2em;
            font-size: 140%;
        }

        textarea {
            resize: none;
            border-right: none;
            border: 1px solid #999;
            border-top-left-radius: var(--radius);
            border-bottom-left-radius: var(--radius);
            height: 3em;
            padding: .3em;
            width: 100%;
            margin: 0 auto;
        }

        button {
            background-color: var(--main-color);
            border: none;
            color: white;
            border-top-right-radius: var(--radius);
            border-bottom-right-radius: var(--radius);
            padding: 0 .6em;
            cursor: pointer;
            font-size: 1.5em;
        }

        .btn-send {
            width: 25px;
            display: block;
        }
    </style>
</head>
<body>
    <main>
        <section class="left-col" id="image-container">
            <img src="/placeholder-image.png" id="img-el">
        </section>
        <section class="right-col">
            <h1>Merry Christmas!!</h1>
            <h2>And all the best for 2024</h2>
            <p>Love Tom</p>
        </section>
        <dialog id="dialog-modal">
            <form id="card-form">
                <label>Describe a Christmassy image for your e-card ðŸŽ„</label>
                <div class="form-inner">
                    <textarea placeholder="A winter scene..." id="user-input"></textarea>
                    <button type="submit" class="btn-send"><img src="send.svg" class="btn-send"></button>
                </div>
            </form>
        </dialog>
    </main>
    <script type="module">
        import { HfInference } from '@huggingface/inference';

        const inference = new HfInference(process.env.HF_API_KEY);
        const headerEl = document.querySelector('header');
        const dialogModalEl = document.getElementById('dialog-modal');
        const imageContainerEl = document.getElementById('image-container');
        const formEl = document.querySelector('#dialog-modal form');
        const userInputEl = document.querySelector('#user-input');

        const loadingContent = function() {
            imageContainerEl
                .firstElementChild
                .setAttribute('src', 'https://i.gifer.com/g0R9.gif');
        }

        const updateImageElement = (url) => {
            imageContainerEl
                .firstElementChild
                .setAttribute('src', url);
        }

        const blobToBase64 = async function(blob) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onloadend = () => resolve(reader.result);
                reader.onerror = reject;
                reader.readAsDataURL(blob);
            });
        }

        const generateImage = async function(value) {
            try {
                const blob = await inference.textToImage({
                    model: 'stabilityai/stable-diffusion-2',
                    inputs: value,
                    parameters: {
                        negative_prompt: 'blurry',
                    },
                });

                const imageUrl = await blobToBase64(blob);
                updateImageElement(imageUrl);
            } catch (error) {
                displayError('Error generating image. Please try again.');
                console.error('Error generating image:', error);
            }
        }

        const displayError = function(err) {
            const p = document.createElement('p');
            headerEl.appendChild(p);

            headerEl.classList.remove('hidden');
            headerEl.firstElementChild.textContent = err;

            setTimeout(() => {
                headerEl.classList.add('hidden');
                headerEl.firstElementChild.remove();
            }, 2000);
        }

        // Show dialog when the content load
        document.addEventListener('DOMContentLoaded', () => dialogModalEl.show());

        function handleSubmit(e) {
            // Prevent the form from submitting
            e.preventDefault();

            // Get the user input
            const userValue = userInputEl.value.trim();
            if(userValue) {
                // Generate an image based on the user value
                generateImage(userValue);

                // Display a loading spinner while request fulfilled
                loadingContent();

                // Close the modal 
                dialogModalEl.close();
            } else {
                // Display an error
                displayError('Please enter a value before submitting.')
                console.log('Please enter a value before submitting.');
            }
        }

        // Listen for submitting the form
        formEl.addEventListener('submit', handleSubmit);

        document.addEventListener('click', function(e) {
            // Open the modal when the user click the button
            if(e.target.classList.contains('imagine')) {
                userInputEl.value = '';
                dialogModalEl.show();

            // Close the modal if the user clicked outside the box
            } else if(e.target.classList.contains('body')) {
                dialogModalEl.close();
            }
        });

        // Detect escape key press, close the modal
        document.addEventListener('keydown', e => e.key === 'Escape' && dialogModalEl.close());
    </script>
</body>
</html>
